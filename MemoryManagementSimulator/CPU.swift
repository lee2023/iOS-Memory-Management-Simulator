//
//  CPU.swift
//  MemoryManagementSimulator
//
//  Created by Rosemary Espinal on 11/27/16.
//  Copyright Â© 2016 Espinal Designs, LLC. All rights reserved.
//

import Foundation

class CPU {
    let processTimeSlice: UInt32 = 30 //30 second time slice for process execution
    
    func executeProcesses(queue: ProcessQueue) {
        if (queue.isEmpty()) {
            print("The queue to empty. Waiting for more processes to arrive...")
        }
        //Let each process run for 30 seconds only then remove it from queue
        let processQueue = queue.getProcessQueue()
        for process in processQueue {
            sleep(processTimeSlice)
            queue.removeFromQueue()
        }
    }
    
    //Process address space needs to be generated by the CPU (page number + offset)
    func generateVirtualAddress(process: Process, pageSize: Int) -> (Int, HashedPageTable) {
        let virtualAddressSpace = process.createVirtualAddressSpace()
        let numOfProcessPages = process.numberOfProcessPages(pageSize: pageSize)
        let pageAccessed = process.randomizePageAccess(numberOfProcessPages: numOfProcessPages)
        let pageVirtualAddress = process.createPageVirtualAddress(pageNumber: pageAccessed)
        let processPageTable = process.createProcessPageTable(newProcess: process, pageSize: pageSize)
        return (pageVirtualAddress, processPageTable)
    }
    
    //Handles page faults
    func handlePageFault(process: Process, processPageTable: HashedPageTable, memory: PhysicalMemory) {
        let freeFrames = memory.getFreeFrameList()
        for index in freeFrames {
            if (freeFrames[index] == -1) {
                //this is a free frame that can be used for the page
                var mmu = MMU()
                var pageNumber = mmu.splitVirtualAddress(process: process)
                
                //update the page table with the new frame for the process page
                processPageTable.updatePageTable(processVirtualPageNumber: pageNumber, processMappedFrame: freeFrames[index])
            }
        }
    }
}
